"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() == "true"

DOMAIN = os.getenv("DOMAIN")
if not DOMAIN and not DEBUG:
    raise Exception("DOMAIN environment variable is required in production")

ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS.extend(["localhost", "127.0.0.1", "0.0.0.0"])
else:
    if DOMAIN:
        ALLOWED_HOSTS.extend([
            DOMAIN,
            f"api.{DOMAIN}",
            f"www.{DOMAIN}",
        ])

# Dynamically find all apps in the backend folder
def find_apps(base_dir, exclude_dirs=None):
    exclude_dirs = exclude_dirs or []
    apps = []
    for item in os.listdir(base_dir):
        item_path = os.path.join(base_dir, item)
        if (
            os.path.isdir(item_path) and
            item not in exclude_dirs and
            os.path.isfile(os.path.join(item_path, '__init__.py'))
        ):
            apps.append(item)
    return apps

# Exclude specific folders
EXCLUDE_DIRS = ['backend', 'requirements', 'staticfiles']

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'import_export',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
] + find_apps(BASE_DIR, EXCLUDE_DIRS)
if DEBUG:
    INSTALLED_APPS += ["django_extensions"]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


if DEBUG:
    # Development: use PostgreSQL !
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT"),
        }
    }
else:
    # Production: Railway DATABASE_URL
    DATABASES = {
        "default": dj_database_url.config(
            default="postgres://user:password@host:5432/dbname",  # fallback if DATABASE_URL is missing
            conn_max_age=600,
            ssl_require=True,
        )
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-mx'
LANGUAGES = [
    ('en', 'English'),
    ('es', 'Spanish'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.AllowAny'],
    'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer'],
    'DEFAULT_PARSER_CLASSES': ['rest_framework.parsers.JSONParser'],
}

# CORS settings
CORS_ALLOW_CREDENTIALS = True

# Base CORS allowed origins
CORS_ALLOWED_ORIGINS = []
CSRF_TRUSTED_ORIGINS = []
if DEBUG:
    # Development settings
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^http://localhost:\d+$",
        r"^http://127.0.0.1:\d+$",
    ]
    CSRF_TRUSTED_ORIGINS.extend([
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ])
else:
    # Production settings
    CORS_ALLOW_ALL_ORIGINS = False
    if DOMAIN:
        CORS_ALLOWED_ORIGINS.extend([
            f"https://{DOMAIN}",
            f"https://www.{DOMAIN}",
        ])
        CSRF_TRUSTED_ORIGINS.extend([
            f"https://{DOMAIN}",
            f"https://www.{DOMAIN}",
            f"https://api.{DOMAIN}",
        ])

CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Cookie settings - improved
if DEBUG:
    # Development - less strict
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_DOMAIN = None  # Explicitly set to None for localhost
    CSRF_COOKIE_DOMAIN = None
else:
    # Production - strict security
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'None'  # Required for cross-site cookies
    CSRF_COOKIE_SAMESITE = 'None'
    # Only set domain if you need cross-subdomain cookies
    if DOMAIN:
        SESSION_COOKIE_DOMAIN = f".{DOMAIN}"  # Note the leading dot for subdomains
        CSRF_COOKIE_DOMAIN = f".{DOMAIN}"


# Debug prints
print(f"âœ… {DATABASES['default']['ENGINE']} - DEBUG: {DEBUG} {ALLOWED_HOSTS}")