# development.yml
# Run with: docker compose -f development.yml build --parallel && docker compose -f development.yml up -d --remove-orphans

services:
  traefik:
    image: traefik:v3.5
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--ping=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      # Only add redirection when TRAEFIK_FORCE_HTTPS is true. This uses Traefik dynamic-style entrypoint configuration,
      # but since compose can't add commands conditionally, we include both flags and rely on proxy rule in routers below.
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.http.tls=true"
      - "--providers.docker.exposedbydefault=false"

  backend:
    env_file: .env
    build:
      context: .
      dockerfile: ./compose/development/Dockerfile.backend
    volumes:
      - ./backend:/app:delegated
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    labels:
      - "traefik.enable=true"
      # Explicit path-based router for backend: higher priority to ensure /api, /admin etc. go to backend.
      - "traefik.http.routers.backend.rule=(PathPrefix(`/api`) || PathPrefix(`/admin`) || PathPrefix(`/static`) || PathPrefix(`/media`))"
      - "traefik.http.routers.backend.entrypoints=web,web-secure"
      - "traefik.http.routers.backend.priority=20"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    environment:
      - PYTHONPATH=/app
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=backend.settings
      - AUTO_MAKEMIGRATIONS=true
    restart: on-failure

  frontend:
    build:
      context: .
      dockerfile: ./compose/development/Dockerfile.frontend
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://localhost/api
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - HOST=0.0.0.0
      - PORT=3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web,web-secure"
      - "traefik.http.routers.frontend.priority=10"
      - "traefik.http.routers.frontend.tls=false"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    restart: on-failure

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: always

volumes:
  db_data:
