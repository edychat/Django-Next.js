# compose/deployment/Dockerfile.backend
# ---------- Build Stage ----------
FROM python:3.11-slim AS python-build-stage

WORKDIR /wheels
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Runtime dependencies only (no build tools needed with binary packages)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    gettext \
    curl \
    awscli \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements to build wheels
COPY compose/requirements/ ./requirements/
RUN pip wheel --wheel-dir /wheels -r requirements/deployment.txt

# Clean up the requirements directory after building wheels
RUN rm -rf ./requirements

# ---------- Runtime Stage ----------
FROM python:3.11-slim AS python-run-stage

WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    gettext \
    curl \
    awscli \
    && rm -rf /var/lib/apt/lists/*

COPY --from=python-build-stage /wheels /wheels
# Install only .whl files, not directories
RUN pip install --no-cache-dir --no-index --find-links=/wheels $(find /wheels -name "*.whl") \
    && rm -rf /wheels

RUN addgroup --system django && adduser --system --ingroup django django

# Copy the entire project including backend folder
COPY --chown=django:django . /app/

# Entrypoint that fetches from SSM (will work on EC2 with IAM role)
RUN printf '%s\n' \
  '#!/bin/sh' \
  'set -e' \
  'echo "ðŸ”‘ Preparing environment..."' \
  '' \
  'fetch_param() {' \
  '  VAR_NAME=$1' \
  '  PARAM_NAME=$2' \
  '  if [ -z "$(eval echo \$$VAR_NAME)" ]; then' \
  '    echo "â†’ fetching $PARAM_NAME into $VAR_NAME"' \
  '    export $VAR_NAME=$(aws ssm get-parameter --name "$PARAM_NAME" --with-decryption --query "Parameter.Value" --output text)' \
  '  fi' \
  '}' \
  '' \
  'fetch_param DOMAIN "/lpvs/DOMAIN"' \
  'fetch_param EMAIL "/lpvs/EMAIL"' \
  'fetch_param DJANGO_SECRET_KEY "/lpvs/DJANGO_SECRET_KEY"' \
  'fetch_param DB_PASSWORD "/lpvs/DB_PASSWORD"' \
  'fetch_param DB_USER "/lpvs/DB_USER"' \
  'fetch_param DB_NAME "/lpvs/DB_NAME"' \
  'fetch_param DB_HOST "/lpvs/DB_HOST"' \
  'fetch_param DB_PORT "/lpvs/DB_PORT"' \
  'fetch_param DEBUG "/lpvs/DEBUG" || export DEBUG=False' \
  'fetch_param HOSTS "/lpvs/HOSTS" || export HOSTS="localhost,127.0.0.1,0.0.0.0"' \
  '' \
  'echo "âœ… Secrets injected."' \
  '' \
  'echo "ðŸ“¦ Running migrations..."' \
  'cd /app/backend && python manage.py migrate --noinput' \
  '' \
  'echo "ðŸ“¦ Collecting static files..."' \
  'cd /app/backend && python manage.py collectstatic --noinput' \
  '' \
  'echo "ðŸ”¥ Launching Gunicorn..."' \
  'exec "$@"' \
  > /entrypoint.sh && chmod +x /entrypoint.sh

USER django

ENTRYPOINT ["/entrypoint.sh"]
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi:application"]